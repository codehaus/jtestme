<?xml version="1.0" encoding="UTF-8"?>
<!-- ====================================================================== 

* Copyright (c) 2007, ThoughtWorks, Inc.	http://www.thoughtworks.com/
* All rights reserved.
* 
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*     http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
* 
* Contributor: Joshua Graham mailto:jagraham@computer.org
* Contributor: 

     JTestMe    
     Instruments the classes covered by TestCases, so that when those classes are changed, we can just run the neccessary TestCases, rather than the whole lot

     ====================================================================== -->
<project name="JTestMe" default="default">
	<description>
	Instruments the classes covered by TestCases, so that when those classes are changed, we can just run the neccessary TestCases, rather than the whole lot
    </description>

	<taskdef resource="org/aspectj/tools/ant/taskdefs/aspectjTaskdefs.properties" />
	<property name="aspectj" location="c:/aspectj1.5/lib" />

	<!-- set global properties for this build -->
	<property name="src" location="src" />
	<property name="test" location="test" />
	<property name="config" location="config" />
	<property name="build" location="build" />
	<property name="build.classes" location="${build}/classes" />
	<property name="build.config" location="${build}/config" />
	<property name="dist" location="dist" />
	<property name="lib" location="lib" />
	<property name="test.reports" value="reports" />

	<path id="project.class.path">
		<!-- AspectJ -->
		<fileset dir="${aspectj}">
			<include name="**/*.jar" />
		</fileset>

		<!-- any JAR in the lib folder tree -->
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<!-- ================================= 
          Default              
         ================================= -->
	<target name="default" depends="test" description="Full build">
	</target>

	<!-- ================================= 
          Compile              
         ================================= -->
	<target name="compile" depends="compile_test" description="Compile source and tests" />

	<target name="compile_src" depends="depends">
		<!-- compile with AspectJ -->
		<iajc srcdir="src" destdir="${build.classes}" debug="false" source="1.5">
			<classpath refid="project.class.path" />
		</iajc>
		<!-- copy to the distribution's config folder tree -->
		<copy overwrite="true" preservelastmodified="true" todir="${build.config}">
			<fileset dir="${config}">
				<include name="**" />
			</fileset>
		</copy>
	</target>

	<target name="compile_test" depends="compile_src">
		<javac srcdir="test" destdir="${build.classes}" debug="false">
		</javac>
	</target>

	<!-- ================================= 
          Test              
         ================================= -->
	<path id="test.class.path">
		<!-- the application's own classes -->
		<pathelement path="${build.classes}" />

		<!-- the files in the config folder -->
		<path path="${build.config}" />

		<path refid="project.class.path" />
	</path>

	<property name="cp" refid="test.class.path" />
	<echo message="${cp}" />

	<target name="test" depends="compile" description="Run tests">
		<junit fork="yes" haltonerror="false">
			<classpath refid="test.class.path" />
			<batchtest todir="${test.reports}">
				<fileset dir="${test}" casesensitive="yes">
					<include name="**/*Test*" />
				</fileset>
			</batchtest>
			<formatter type="xml" />
		</junit>
		<junitreport todir="${test.reports}">
			<fileset dir="${test.reports}">
				<include name="TEST-*.xml" />
			</fileset>
			<report todir="${test.reports}" />
		</junitreport>
	</target>

	<!-- ================================= 
          Distribution              
         ================================= -->
	<target name="dist" depends="depends" description="Create distributable">
		<!-- Create the distribution folder -->
		<mkdir dir="${dist}" />
		<mkdir dir="${dist}" />

		<!-- Put everything in ${build} into the jar file -->
		<jar jarfile="${dist}/jtestme.jar" basedir="${build}/classes" />

		<!-- copy to the distribution's lib folder tree -->
		<copy overwrite="true" preservelastmodified="true" todir="${dist}">
			<!-- all files in the lib/dist folder tree (no need to take dev-time libs) -->
			<fileset dir="${lib}/dist">
				<include name="**" />
			</fileset>
		</copy>
		<copy overwrite="true" preservelastmodified="true" todir="${dist}">
			<!-- all files in the build config folder tree -->
			<fileset dir="${build.config}">
				<include name="**" />
			</fileset>
		</copy>
	</target>


	<!-- ================================= 
          Clean              
         ================================= -->
	<target name="clean" description="Clean project folders">
		<!-- Delete the ${build} and ${dist} directory trees -->
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<!-- - - - - - - - - - - - - - - - - - 
         Internal targets                      
         - - - - - - - - - - - - - - - - - -->
	<target name="depends" depends="init">
	</target>

	<target name="init">
		<!-- Create the time stamp -->
		<tstamp />

		<!-- Create the build directory structure used by compile -->
		<mkdir dir="${build}" />
		<mkdir dir="${build.classes}" />
		<mkdir dir="${build.config}" />
		<mkdir dir="${test.reports}" />
	</target>

</project>
